---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: consumers.nats.crossplane.io
spec:
  group: nats.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - nats
    kind: Consumer
    listKind: ConsumerList
    plural: consumers
    singular: consumer
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .spec.forProvider.domain
      name: DOMAIN
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    - jsonPath: .status.atProvider.state.pushBound
      name: PUSH CONSUMER
      priority: 1
      type: string
    - jsonPath: .status.atProvider.state.streamName
      name: STREAM
      priority: 1
      type: string
    - jsonPath: .status.atProvider.state.numPending
      name: UNPROCESSED
      priority: 1
      type: string
    - jsonPath: .status.atProvider.state.numRedelivered
      name: REDELIVERERD
      priority: 1
      type: string
    - jsonPath: .status.atProvider.state.numAckPending
      name: ACK PENDING
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: A Consumer is an example API type.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: A ConsumerSpec defines the desired state of a consumer.
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                description: ConsumerParameters are the configurable fields of a consumer.
                properties:
                  config:
                    description: Config is the consumer configuration.
                    properties:
                      ackPolicy:
                        default: Explicit
                        description: AckPolicy describes the requirement of client
                          acknowledgements, either Explicit, None, or All. For more
                          information see https://docs.nats.io/nats-concepts/jetstream/consumers#ackpolicy
                        enum:
                        - Explicit
                        - None
                        - All
                        type: string
                      ackWait:
                        default: 30s
                        description: AckWait is the duration that the server will
                          wait for an ack for any individual message once it has been
                          delivered to a consumer. If an ack is not received in time,
                          the message will be redelivered. Format is a string duration,
                          e.g. 1h, 1m, 1s, 1h30m or 2h3m4s.
                        pattern: ([0-9]+h)?([0-9]+m)?([0-9]+s)?
                        type: string
                      backoff:
                        description: 'Backoff is a list of time durations that represent
                          the time to delay based on delivery count. Format of the
                          durations is a string duration, e.g. 1h, 1m, 1s, 1h30m or
                          2h3m4s where multiple durations are separated by commas.
                          Example: `1s,2s,3s,4s,5s`.'
                        pattern: ^(([0-9]+h)?([0-9]+m)?([0-9]+s)?)(?:,\s*(([0-9]+h)?([0-9]+m)?([0-9]+s)?))*$
                        type: string
                      deliverPolicy:
                        default: All
                        description: DeliverPolicy defines the point in the stream
                          to receive messages from, either All, Last, New, ByStartSequence,
                          ByStartTime, or LastPerSubject. Fore more information see
                          https://docs.nats.io/jetstream/concepts/consumers#deliverpolicy
                        enum:
                        - All
                        - Last
                        - New
                        - ByStartSequence
                        - ByStartTime
                        - LastPerSubject
                        type: string
                      description:
                        description: Description is a human readable description of
                          the consumer. This can be particularly useful for ephemeral
                          consumers to indicate their purpose since the durable name
                          cannot be provided.
                        type: string
                      filterSubject:
                        description: FilterSubject defines an overlapping subject
                          with the subjects bound to the stream which will filter
                          the set of messages received by the consumer.
                        type: string
                      inactiveThreshold:
                        description: InactiveThreshold defines the duration that instructs
                          the server to cleanup consumers that are inactive for that
                          long. Format is a string duration, e.g. 1h, 1m, 1s, 1h30m
                          or 2h3m4s.
                        pattern: ([0-9]+h)?([0-9]+m)?([0-9]+s)?
                        type: string
                      maxAckPending:
                        default: 1000
                        description: MaxAckPending sets the number of outstanding
                          acks that are allowed before message delivery is halted.
                        type: integer
                      maxDeliver:
                        default: -1
                        description: MaxDeliver is the maximum number of times a specific
                          message delivery will be attempted. Applies to any message
                          that is re-sent due to ack policy (i.e. due to a negative
                          ack, or no ack sent by the client).
                        type: integer
                      memStorage:
                        description: MemoryStorage if set, forces the consumer state
                          to be kept in memory rather than inherit the storage type
                          of the stream (file in this case).
                        type: boolean
                      numReplicas:
                        default: 0
                        description: Replicas sets the number of replicas for the
                          consumer's state. By default, when the value is set to zero,
                          consumers inherit the number of replicas from the stream.
                        type: integer
                      optStartSeq:
                        description: OptStartSeq is an optional start sequence number
                          and is used with the DeliverByStartSequence deliver policy.
                        format: int64
                        type: integer
                      optStartTime:
                        description: OptStartTime is an optional start time and is
                          used with the DeliverByStartTime deliver policy. The time
                          format is RFC 3339, e.g. 2023-01-09T14:48:32Z
                        pattern: ^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
                        type: string
                      pull:
                        description: PullConsumer defines the pull-based consumer
                          configuration.
                        properties:
                          maxBatch:
                            description: MaxRequestBatch defines th maximum batch
                              size a single pull request can make. When set with MaxRequestMaxBytes,
                              the batch size will be constrained by whichever limit
                              is hit first. This is a pull consumer specific setting.
                            type: integer
                          maxBytes:
                            description: MaxRequestMaxBytes defines the  maximum total
                              bytes that can be requested in a given batch. When set
                              with MaxRequestBatch, the batch size will be constrained
                              by whichever limit is hit first. This is a pull consumer
                              specific setting.
                            type: integer
                          maxExpires:
                            description: MaxRequestExpires defines the maximum duration
                              a single pull request will wait for messages to be available
                              to pull. This is a pull consumer specific setting.
                            pattern: ([0-9]+h)?([0-9]+m)?([0-9]+s)?
                            type: string
                          maxWaiting:
                            default: 512
                            description: MaxWaiting defines the maximum number of
                              waiting pull requests. This is a pull consumer specific
                              setting.
                            type: integer
                        type: object
                      push:
                        description: PushConsumer defines the push-based consumer
                          configuration.
                        properties:
                          deliverGroup:
                            description: DeliverGroup defines the queue group name
                              which, if specified, is then used to distribute the
                              messages between the subscribers to the consumer. This
                              is analogous to a queue group in core NATS. See https://docs.nats.io/nats-concepts/core-nats/queue
                              for more information on queue groups. This is a push
                              consumer specific setting.
                            type: string
                          deliverSubject:
                            description: DeliverSubject defines the subject to deliver
                              messages to. Note, setting this field implicitly decides
                              whether the consumer is push or pull-based. With a deliver
                              subject, the server will push messages to client subscribed
                              to this subject. This is a push consumer specific setting.
                            type: string
                          flowControl:
                            description: FlowControl enables per-subscription flow
                              control using a sliding-window protocol. This protocol
                              relies on the server and client exchanging messages
                              to regulate when and how many messages are pushed to
                              the client. This one-to-one flow control mechanism works
                              in tandem with the one-to-many flow control imposed
                              by MaxAckPending across all subscriptions bound to a
                              consumer. This is a push consumer specific setting.
                            type: boolean
                          headersOnly:
                            description: HeadersOnly delivers, if set, only the headers
                              of messages in the stream and not the bodies. Additionally
                              adds Nats-Msg-Size header to indicate the size of the
                              removed payload.
                            type: boolean
                          idleHeartbeat:
                            description: IdleHeartbeat defines, if set, that the server
                              will regularly send a status message to the client (i.e.
                              when the period has elapsed) while there are no new
                              messages to send. This lets the client know that the
                              JetStream service is still up and running, even when
                              there is no activity on the stream. The message status
                              header will have a code of 100. Unlike FlowControl,
                              it will have no reply to address. It may have a description
                              such "Idle Heartbeat". Note that this heartbeat mechanism
                              is all handled transparently by supported clients and
                              does not need to be handled by the application. Format
                              is a string duration, e.g. 1h, 1m, 1s, 1h30m or 2h3m4s.
                              This is a push consumer specific setting.
                            pattern: ([0-9]+h)?([0-9]+m)?([0-9]+s)?
                            type: string
                          rateLimitBps:
                            description: RateLimit is used to throttle the delivery
                              of messages to the consumer, in bits per second.
                            format: int64
                            type: integer
                        type: object
                      replayPolicy:
                        default: Instant
                        description: ReplayPolicy is used to define the mode of message
                          replay. If the policy is Instant, the messages will be pushed
                          to the client as fast as possible while adhering to the
                          Ack Policy, Max Ack Pending and the client's ability to
                          consume those messages. If the policy is Original, the messages
                          in the stream will be pushed to the client at the same rate
                          that they were originally received, simulating the original
                          timing of messages.
                        enum:
                        - Instant
                        - Original
                        type: string
                      sampleFreq:
                        description: SampleFrequency sets the percentage of acknowledgements
                          that should be sampled for observability.
                        pattern: ^([1-9][0-9]?|100)%?$
                        type: string
                    required:
                    - ackPolicy
                    - ackWait
                    - deliverPolicy
                    - numReplicas
                    - replayPolicy
                    type: object
                  domain:
                    description: Domain is the domain of the Jetstream stream the
                      consumer is created for.
                    type: string
                  stream:
                    description: Stream is the name of the Jetstream stream the consumer
                      is created for.
                    type: string
                required:
                - config
                - stream
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: A ConsumerStatus represents the observed state of a consumer.
            properties:
              atProvider:
                description: ConsumerObservation are the observable fields of a consumer.
                properties:
                  state:
                    description: State is the current state of the consumer
                    properties:
                      ackFloor:
                        description: AckFloor TBD
                        properties:
                          consumerSeq:
                            description: Consumer is the consumer name
                            format: int64
                            type: integer
                          lastActive:
                            description: Last is the last time the consumer was active
                              needs to be converted to time.Time
                            type: string
                          streamSeq:
                            description: Stream is the name of the stream
                            format: int64
                            type: integer
                        required:
                        - consumerSeq
                        - streamSeq
                        type: object
                      cluster:
                        description: Cluster is the cluster information.
                        properties:
                          leader:
                            description: Leader is the leader of the cluster.
                            type: string
                          name:
                            description: Name is the name of the cluster.
                            type: string
                          replicas:
                            description: Replicas are the replicas of the cluster.
                            items:
                              description: PeerInfo shows information about all the
                                peers in the cluster that are supporting the stream
                                or consumer.
                              properties:
                                active:
                                  type: string
                                current:
                                  type: boolean
                                lag:
                                  format: int64
                                  type: integer
                                name:
                                  type: string
                                offline:
                                  type: boolean
                              required:
                              - active
                              - current
                              - name
                              type: object
                            type: array
                        type: object
                      created:
                        description: Created is the time the consumer was created.
                          needs to be converted to time.Time
                        type: string
                      delivered:
                        description: Delivered is the consumer sequence and last activity.
                        properties:
                          consumerSeq:
                            description: Consumer is the consumer name
                            format: int64
                            type: integer
                          lastActive:
                            description: Last is the last time the consumer was active
                              needs to be converted to time.Time
                            type: string
                          streamSeq:
                            description: Stream is the name of the stream
                            format: int64
                            type: integer
                        required:
                        - consumerSeq
                        - streamSeq
                        type: object
                      domain:
                        description: Domain is the domain of the consumer.
                        type: string
                      durableName:
                        description: Durable is the durable name.
                        type: string
                      name:
                        description: Name is the consumer name.
                        type: string
                      numAckPending:
                        description: NumAckPending is the number of messages pending
                          acknowledgement.
                        type: integer
                      numPending:
                        description: NumPending is the number of messages pending.
                        format: int64
                        type: integer
                      numRedelivered:
                        description: NumRedelivered is the number of redelivered messages.
                        type: integer
                      numWaiting:
                        description: NumWaiting is the number of messages waiting
                          to be delivered.
                        type: integer
                      pushBound:
                        description: PushBound is whether the consumer is push bound.
                        type: string
                      streamName:
                        description: Stream is the stream name.
                        type: string
                    required:
                    - ackFloor
                    - created
                    - delivered
                    - domain
                    - durableName
                    - name
                    - numAckPending
                    - numPending
                    - numRedelivered
                    - numWaiting
                    - streamName
                    type: object
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
